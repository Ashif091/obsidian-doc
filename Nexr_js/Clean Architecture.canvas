{
	"nodes":[
		{"id":"25ff4020e1f2251e","type":"group","x":-1080,"y":-1420,"width":1180,"height":580,"label":"Quiz app"},
		{"id":"4c348a3299b8b811","type":"text","text":"![[Pasted image 20240715234752.png]]","x":580,"y":-1322,"width":731,"height":525},
		{"id":"681f416b31e0bca6","type":"text","text":"#### Question make section \n>POST\n\n1. Question \n2. 4 option \n3. correct one\n\n","x":-240,"y":-1047,"width":300,"height":187},
		{"id":"54283a731e3cac05","type":"text","text":"# creator ","x":-1060,"y":-1100,"width":178,"height":60},
		{"id":"14e48dce74fd2400","type":"text","text":"# user ","x":-1060,"y":-960,"width":178,"height":50},
		{"id":"3d55914c1584a61b","type":"text","text":"#### create quiz \n>POST\n1. Name of quiz\n2. count of questions\n\n","x":-720,"y":-1100,"width":320,"height":165},
		{"id":"7dfaf744f82aaf0c","type":"text","text":"#### singup\n>default\n1. name\n2. email \n\n","x":-640,"y":-1380,"width":280,"height":180},
		{"id":"8602546ac0eb58a6","type":"text","text":"### interfaces/IUserAuth\n```ts\nimport { Types } from \"mongoose\";\nimport { User } from \"../entities/User\";\n  \nexport interface IUserAuth {\n  registerUser(data: Partial<User>, type?: string): Promise<User>;\n  loginUser(email: string, password: string): Promise<User | null>;\n  findUserByEmail(email: string): Promise<User | null>;\n  findUserById(email: string): Promise<User | null>;\n  verifyUser(email: string, token: string): Promise<User | null>;\n  getUsersFromSearch(email: string): Promise<User[]>;\n}\n```","x":-920,"y":101,"width":640,"height":376,"color":"4"},
		{"id":"6ad0760d80384252","type":"text","text":"### main.ts\n```ts\n app.use(\"/auth\", authRouter);\n```","x":-799,"y":-303,"width":399,"height":135},
		{"id":"52000862f52188cd","type":"text","text":"### services/userService.ts\n```ts\nimport { IUserRepository } from \"../interfaces/IUserRepository\";\nimport { IUserAuth } from \"../interfaces/IUserAuth\";\n\nclass authService implements IUserAuth{\nprivate repository: IUserRepository; \n  constructor( repository: IUserRepository) {\n    this.repository = repository;\n  }\n\n  findUserByEmail(email: string): Promise<User | null> {\n    const user = this.repository.findByEmail(email);\n    return user;\n  }\n  // ________________\n  async loginUser(email: string, password: string): Promise<User | null> {\n    const user = await this.findUserByEmail(email);\n    if (!user) {\n      return null;\n    }\n    if (user.password &&user.verified) {\n      const isPasswordCorrect = await this.bcrypt.compare(\n        password,\n        user.password\n      );\n      if (isPasswordCorrect && user.id !== undefined) {\n        return user;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n}\n```","x":600,"y":-80,"width":800,"height":632},
		{"id":"5a9f5cc954ba5224","type":"text","text":"### interfaces/IUserRepository\n```ts\nimport { User } from \"../entities/User\";\nexport interface IUserRepository {\n  create(data: User): Promise<User>;\n  findByEmail(email: string): Promise<User | null>;\n  findById(email: string): Promise<User | null>;\n  update(id: string, data: any): Promise<User | null>;\n  getUsersFromSearch(email: string): Promise<any[]>;\n}\n```","x":1560,"y":96,"width":620,"height":280,"color":"4"},
		{"id":"0c82ae491a1f82d7","type":"text","text":"### /database/models/User\n```ts\nimport mongoose from \"mongoose\";\n\nconst UserSchema = new mongoose.Schema({\n  fullname: { type: String, required: true },\n  email: { type: String, required: true },\n  password: { type: String, required: true },\n  profile:{type:String , required:false},\n  verify_token:{type:String , required:true},\n  verified:{type:Boolean , required:true , default:false}\n},{timestamps:true});\nexport const User = mongoose.model(\"User\", UserSchema);\n```","x":1160,"y":-754,"width":600,"height":320},
		{"id":"104ac6695714f556","type":"text","text":"### database/repository/UserRepository.ts\n\n```ts\nimport { User } from \"../../entities/User\";\nimport { IUserRepository } from \"../../interfaces/IUserRepository\";\nimport { User as UserModel} from \"../models/User\"\n\nexport class UserRepository implements IUserRepository {\n  async findById(id: string): Promise<User | null> {\n    const User = await UserModel.findOne({ _id: id }); \n    if (User) {\n      const userData: User = {\n        id: User._id.toString(),\n        fullname: User.fullname,\n        email: User.email,\n        password: User.password,\n        profile: User.profile || undefined,\n        verify_token: User.verify_token,\n        verified: User.verified,\n      };\n      return userData;\n    }\n    return null;\n  }\n }\n```","x":540,"y":-594,"width":560,"height":432,"color":"#342d34"},
		{"id":"6a39ace949c88735","type":"text","text":"### presentation/routes/authRoutes.ts\n\n```ts\nimport { UserRepository } from \"../../database/repository/UserRepository\";\nimport { authService } from \"../../services/userService\";\nimport { authController } from \"../controllers/authController\";\nconst repository = new UserRepository();\n\nconst auth = new authService(repository); \nconst controller = new authController(auth);\n\nrouter.post(\"/login\", controller.onLoginUser.bind(controller));\n```\n","x":-280,"y":-378,"width":717,"height":332},
		{"id":"744909a8f290a847","type":"text","text":"### presentation/controllers/authController.ts\n\n```ts\nimport { IUserAuth } from \"../../interfaces/IUserAuth\";\nimport { User } from \"../../entities/User\";\n\nexport class authController {\n  private authService: IUserAuth;\n\n  constructor(authService: IUserAuth) {\n    this.authService = authService;\n  }\n}\n  async onLoginUser(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { email, password } = req.body;\n\n      const user = await this.authService.loginUser(email, password);\n\n        return res.status(200).json({ message: \"Sign-in successful\", user });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n```","x":-200,"y":160,"width":700,"height":527},
		{"id":"426b03086cdc619e","type":"text","text":"### entities/User\n```ts\nexport interface User {\n  id: string;\n  fullname: string;\n  email: string;\n  password: string;\n  profile?: string;\n  verify_token: string;\n  verified:boolean;\n}\n```","x":670,"y":840,"width":301,"height":295,"color":"1"}
	],
	"edges":[
		{"id":"237f135fe701e6fc","fromNode":"3d55914c1584a61b","fromSide":"right","toNode":"681f416b31e0bca6","toSide":"left","color":"4"},
		{"id":"edd7041fc5fd3b9c","fromNode":"54283a731e3cac05","fromSide":"right","toNode":"3d55914c1584a61b","toSide":"left","color":"3"},
		{"id":"d47396bbad8785e1","fromNode":"54283a731e3cac05","fromSide":"right","toNode":"7dfaf744f82aaf0c","toSide":"left"},
		{"id":"85cadf406cfaa106","fromNode":"6ad0760d80384252","fromSide":"right","toNode":"6a39ace949c88735","toSide":"left","fromEnd":"arrow"},
		{"id":"cabeab0964179ce1","fromNode":"5a9f5cc954ba5224","fromSide":"left","toNode":"52000862f52188cd","toSide":"right","color":"4"},
		{"id":"f572d3d3753def9e","fromNode":"6a39ace949c88735","fromSide":"right","toNode":"52000862f52188cd","toSide":"left","toEnd":"none"},
		{"id":"2e91df25e472d7e6","fromNode":"426b03086cdc619e","fromSide":"top","toNode":"5a9f5cc954ba5224","toSide":"bottom","color":"#eca2a2"},
		{"id":"e918ed4561640be0","fromNode":"426b03086cdc619e","fromSide":"top","toNode":"744909a8f290a847","toSide":"bottom","color":"#ffbdbd"},
		{"id":"b3eb1271d1ff98f5","fromNode":"6a39ace949c88735","fromSide":"bottom","toNode":"744909a8f290a847","toSide":"top"},
		{"id":"a9f81595b5827713","fromNode":"426b03086cdc619e","fromSide":"top","toNode":"8602546ac0eb58a6","toSide":"bottom","color":"#d2a3a3"},
		{"id":"918aa57f88d9bf64","fromNode":"52000862f52188cd","fromSide":"left","toNode":"8602546ac0eb58a6","toSide":"top","color":"1"},
		{"id":"77f669bfb3d3b977","fromNode":"8602546ac0eb58a6","fromSide":"right","toNode":"744909a8f290a847","toSide":"left","color":"4"},
		{"id":"f96e200527b9b493","fromNode":"104ac6695714f556","fromSide":"right","toNode":"5a9f5cc954ba5224","toSide":"top","color":"1"},
		{"id":"92e336e1b9a7d37b","fromNode":"104ac6695714f556","fromSide":"left","toNode":"6a39ace949c88735","toSide":"top"},
		{"id":"13ae412979625170","fromNode":"426b03086cdc619e","fromSide":"top","toNode":"104ac6695714f556","toSide":"bottom","color":"#ddb0b0"},
		{"id":"13a5e97d4c7724a7","fromNode":"0c82ae491a1f82d7","fromSide":"left","toNode":"104ac6695714f556","toSide":"top","color":"2"}
	]
}